-
  name: test assert equals list of lists
  setup: 
    - use temp
    - drop table test_with_partitions
    - create table test_with_partitions(id bigint) partitioned by (dt string, dh string)
    - alter table test_with_partitions add partition(dt='20170202', dh='00')
    - alter table test_with_partitions add partition(dt='20170202', dh='01')
    - alter table test_with_partitions add partition(dt='20170202', dh='02')
  test: show partitions test_with_partitions
  assert_type: assert_equals
  assert_expectation:
    - [dt=20170202/dh=00]
    - [dt=20170202/dh=01]
    - [dt=20170202/dh=02]
  teardown:
    - drop table test_with_partitions
  ignore_failures: false
  return_type: LIST
- 
  name: test assert equals list of maps
  setup:
    - use temp
    - drop table test_map
    - create external table test_map(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_map
  assert_type: assert_equals
  assert_expectation:
    - 
      id: 1
      name: name1
    -
      id: 2
      name: name2
    -
      id: 3
      name: name3
    -
      id: 4
      name: name4
    -
      id: 5
      name: name5
  ignore_failures: false
  teardown: 
    - drop table test_map
  return_type: MAP
- 
  name: test assert equals file
  setup:
    - use temp
    - drop table test_file
    - create external table test_file(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_file
  assert_type: assert_equals
  assert_expectation: src/test/resources/expected_equals.csv
  teardown: 
    - drop table test_file
  ignore_failures: false
  return_type: CSV
-
  name: test assert include list of lists
  setup: 
    - use temp
    - drop table test_with_partitions
    - create table test_with_partitions(id bigint) partitioned by (dt string, dh string)
    - alter table test_with_partitions add partition(dt='20170202', dh='00')
    - alter table test_with_partitions add partition(dt='20170202', dh='01')
    - alter table test_with_partitions add partition(dt='20170202', dh='02')
  test: show partitions test_with_partitions
  assert_type: assert_includes
  assert_expectation:
    - [dt=20170202/dh=00]
    - [dt=20170202/dh=01]
  teardown:
    - drop table test_with_partitions
  ignore_failures: false
  return_type: LIST
- 
  name: test assert include list of maps
  setup:
    - use temp
    - drop table if exists test_map
    - create external table test_map(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_map
  assert_type: assert_includes
  assert_expectation:
    - 
      id: 1
      name: name1
    -
      id: 2
      name: name2
    -
      id: 3
      name: name3
    -
      id: 4
      name: name4
  ignore_failures: false
  teardown: 
    - drop table test_map
  return_type: MAP
- 
  name: test assert include file
  setup:
    - use temp
    - drop table if exists test_file
    - create external table test_file(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_file
  assert_type: assert_includes
  assert_expectation: src/test/resources/expected_includes.csv
  teardown: 
    - drop table test_file
  ignore_failures: false
  return_type: CSV
-
  name: test assert excludes list of lists
  setup: 
    - use temp
    - drop table test_with_partitions
    - create table test_with_partitions(id bigint) partitioned by (dt string, dh string)
    - alter table test_with_partitions add partition(dt='20170202', dh='00')
    - alter table test_with_partitions add partition(dt='20170202', dh='01')
    - alter table test_with_partitions add partition(dt='20170202', dh='02')
  test: show partitions test_with_partitions
  assert_type: assert_excludes
  assert_expectation:
    - [dt=20170202/dh=10]
    - [dt=20170202/dh=11]
    - [dt=20170202/dh=12]
  teardown:
    - drop table test_with_partitions
  ignore_failures: false
  return_type: LIST
- 
  name: test assert excludes list of maps
  setup:
    - use temp
    - drop table test_map
    - create external table test_map(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_map
  assert_type: assert_excludes
  assert_expectation:
    - 
      id: 6
      name: name7
    -
      id: 8
      name: name8
    -
      id: 9
      name: name9
    -
      id: 10
      name: name10
    -
      id: 11
      name: name11
  ignore_failures: false
  teardown: 
    - drop table test_map
  return_type: MAP
- 
  name: test assert excludes file
  setup:
    - use temp
    - drop table test_file
    - create external table test_file(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_file
  assert_type: assert_excludes
  assert_expectation: src/test/resources/expected_excludes.csv
  teardown: 
    - drop table test_map
  ignore_failures: false
  return_type: CSV
-
  name: test assert ordered equals list of lists
  setup: 
    - use temp
    - drop table if exists test_list
    - create external table test_list(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_list order by id desc
  assert_type: assert_ordered_equals
  assert_expectation:
    - [5,name5]
    - [4,name4]
    - [3,name3]
    - [2,name2]
    - [1,name1]    
  teardown:
    - drop table test_list
  ignore_failures: false
  return_type: LIST
- 
  name: test assert equals list of maps
  setup:
    - use temp
    - drop table test_map
    - create external table test_map(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_map order by id desc
  assert_type: assert_ordered_equals
  assert_expectation:
    - 
      id: 5
      name: name5
    -
      id: 4
      name: name4
    -
      id: 3
      name: name3
    -
      id: 2
      name: name2
    -
      id: 1
      name: name1
  ignore_failures: false
  teardown: 
    - drop table test_map
  return_type: MAP
- 
  name: test assert equals file
  setup:
    - use temp
    - drop table test_file
    - create external table test_file(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from test_file order by id desc
  assert_type: assert_ordered_equals
  assert_expectation: src/test/resources/expected_ordered_equals.csv
  teardown: 
    - drop table test_file
  ignore_failures: false
  return_type: CSV
-
  name: test assert syntax exception
  setup: 
    - use temp
    - drop table if exists test_list
    - create external table test_list(id bigint, name string) row format delimited fields terminated by '\t' lines terminated by '\n' stored as TextFile location 's3://com.autodesk.edl.stg/user/kumaras/validation_fw/test'
  test: select id, name from table test_list
  assert_type: assert_fails
  assert_expectation: "org.apache.spark.sql.AnalysisException"
  teardown:
    - drop table test_list
  ignore_failures: false
  return_type: EXCEPTION
- 
  name: test assert permission exception
  test: use usage
  assert_type: assert_fails
  assert_expectation: "org.apache.hadoop.hive.ql.metadata.HiveException: MetaException(message:No privilege 'Select' found for inputs { database:usage})"
  return_type: EXCEPTION